from flask import Flask, request
import psycopg2
import random
import hashlib
import json

app = Flask(__name__)

connection=psycopg2.connect(
    host="localhost",
    database="MTAA",
    user="postgres",
    password="123"
    )
cursor = connection.cursor()

def find_in_database(table, column, value):
     cursor.execute(f"""
         SELECT id 
         FROM public.{table}
         WHERE {column}= %s ;
         """,(value,))
     res_id=cursor.fetchone()
     if(res_id==None):
         return None
     return res_id[0]
 
def get_from_database(target, table, column, value):
    cursor.execute(f"""
        SELECT {target} 
        FROM public.{table}
        WHERE {column}= %s ;
        """,(value,))
    res_id=cursor.fetchone()
    if(res_id==None):
        return None
    return res_id[0]
 
def set_in_database(table, column, value, in_column, in_value):
    cursor.execute(f"""
        UPDATE public.{table} 
        SET {in_column}= %s
        WHERE {column}= %s ;
        """,(in_value, value,))
    res_id=cursor.fetchone()
    if(res_id==None):
        return None
    return res_id[0]
 

@app.get("/store")
def get_stores():
    cursor.execute("""
        SELECT table_name 
        FROM information_schema.tables
        WHERE table_schema = 'public'  -- Change if you're using a different schema
        ORDER BY table_name;
    """)
    tables=cursor.fetchall()
    return {"stores": tables}


@app.put("/preferences")
def change_settings():
    setting = request.args.get('setting')
    val = request.args.get('val')
    cursor.execute("""
        SELECT table_name 
        FROM information_schema.tables
        WHERE table_schema = 'public'  -- Change if you're using a different schema
        ORDER BY table_name;
    """)
    tables=cursor.fetchall()
    print(f"changed {setting} to {val}")
    return {"stores": tables}

#---------------
def init_DB():
    cursor.execute("""
        -- This script was generated by the ERD tool in pgAdmin 4.
        -- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
        BEGIN;


        CREATE TABLE IF NOT EXISTS public.dish
        (
            id uuid,
            title text,
            small_portion integer,
            medium_portion integer,
            large_portion integer,
            small_price money,
            medium_price money,
            large_price money,
            portion_unit text,
            description text,
            discount_base real,
            picture bytea,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.special
        (
            id uuid,
            dish_id uuid,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.order_item
        (
            id bigserial,
            portion integer,
            count integer,
            price money,
            dish_id uuid,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public."order"
        (
            id uuid,
            "user" uuid,
            "timestamp" timestamp with time zone,
            comment text,
            price money,
            discount_used uuid,
            items_start bigint,
            items_end bigint,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.discounts
        (
            id uuid,
            effectivness real,
            cost integer,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public."user"
        (
            id uuid,
            name text,
            password bytea,
            salt bytea,
            discount_points integer,
            loyalty_points integer,
            level integer,
            favourite_capacity integer,
            favourite_free integer,
            pref_id uuid,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.favourites
        (
            id uuid,
            user_id uuid,
            dish_id uuid,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.delivery
        (
            id uuid,
            order_id uuid,
            card_used boolean,
            postal_code text,
            street text,
            house_number integer,
            delivered boolean,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.reservation
        (
            id uuid,
            order_id uuid,
            date date,
            "from" time with time zone,
            until time with time zone,
            people integer,
            "table" integer,
            "QR code" bytea,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.preferences
        (
            id uuid,
            user_id uuid,
            language text,
            darkmode boolean,
            high_contrast boolean,
            PRIMARY KEY (id)
        );

        END;
        """)
    connection.commit()
    print("initiazed DB")
    return

def clear_DB():
    cursor.execute("""
        DELETE FROM public.dish
                WHERE true;
        DELETE FROM public.special
                WHERE true;
        DELETE FROM public.order_item
                WHERE true;
        DELETE FROM public."order"
                WHERE true;
        DELETE FROM public.discounts
                WHERE true;
        DELETE FROM public."user"
                WHERE true;
        DELETE FROM public.favourites
                WHERE true;
        DELETE FROM public.delivery
                WHERE true;
        DELETE FROM public.reservation
                WHERE true;
        DELETE FROM public.preferences
                WHERE true;
        SELECT SETVAL(
            pg_get_serial_sequence('order_item', 'id'),
            (SELECT COALESCE(MAX(id), 1) FROM order_item)
        );
	""")
    connection.commit()
    print("cleared DB")
    return

def register_user(name, password):
    name=str(name)
    password=str(password)
    
    salt=random.randbytes(8)
    sha256=hashlib.sha256()
    sha256.update(password.encode())
    sha256.update(salt)
    pass_hash=sha256.hexdigest().encode()
    print("adding: ",name)
    print(salt)
    print(pass_hash)
    print("------")

    cursor.execute("""
        SELECT password, salt 
        FROM public."user"
        WHERE name= %s ;
        """,(name,))
    res=cursor.fetchone()
    if(res!=None):
        return False
    
    try:
        cursor.execute("""
        INSERT INTO public."user"(
            id, name, password, salt, 
            discount_points, loyalty_points, level, 
            favourite_capacity, favourite_free, pref_id)
            VALUES (
            gen_random_uuid(), %s, %s, %s, 
            0, 0, 0, 
            0, 1, null);
            """, (name, pass_hash, salt))
        connection.commit()
    except:
        return None
    return True

def add_points_to(discount, loyalty, name):
    cursor.execute("""
        UPDATE public."user"
        SET discount_points = discount_points + %s,
        loyalty_points = loyalty_points + %s
        WHERE name = %s;
        """,(discount, loyalty,name))
    connection.commit()
    
def login(name, password):
    name=str(name)
    password=str(password)
    
    cursor.execute("""
        SELECT password, salt 
        FROM public."user"
        WHERE name= %s ;
        """,(name,))
    password_salt=cursor.fetchone()
    if(password_salt == None):
        return False

    user_salt=password_salt[1].tobytes()
    sha256=hashlib.sha256()
    sha256.update(password.encode())
    sha256.update(user_salt)
    pass_hash=sha256.hexdigest().encode()
    
    return password_salt[0].tobytes() == pass_hash

@app.put("/change_password")
def change_password():
    name = request.args.get("name")
    old_password = request.args.get("old_password")
    new_password = request.args.get("new_password")
 
    if not find_in_database("user", "name", name):
        return "incorrect user name"
 
    # print(name, old_password, new_password)
    if login(name, old_password):
        user_salt = random.randbytes(8)
        sha256 = hashlib.sha256()
        sha256.update(new_password.encode())
        sha256.update(user_salt)
        pass_hash = sha256.hexdigest().encode()
 
        try:
            cursor.execute("""
            UPDATE "user" 
            SET password = %s, salt = %s
            WHERE name = %s ;
            """,(pass_hash, user_salt, name))
            connection.commit()
        except:
            return "something went wrong during password update"
        return "password changed successfully"
    else:
        return "incorrect old password"

@app.delete("/remove_user")
def remove_user():
    name = request.args.get("name")
    password = request.args.get("password")
    user_id = find_in_database("user", "name", name)
    # print("user: ", name, user_id, type(name), type(user_id))

    if not user_id:
        return "invalid user"
    if not login(name, password):
        return "invalid password"

    order_id = get_from_database("id", "order", "user", user_id)
    if order_id:
        return "unable to delete user during order fulfilment"

    if get_from_database("id", "favourites", "user", user_id):
        try:
            cursor.execute("""
            DELETE FROM favourites
            WHERE "user" = %s; 
            """, (user_id,))
            connection.commit()
        except:
            return "something went wrong while deleting favourites associated with user"

    if get_from_database("id", "preferences", "user", user_id):
        try:
            cursor.execute("""
            DELETE FROM preferences
            WHERE "user" = %s; 
            """, (user_id,))
            connection.commit()
        except:
            return "something went wrong while deleting preferences associated with user"

    try:
        cursor.execute("""
        DELETE FROM public."user"
        WHERE name = %s; 
        """, (name,))
        connection.commit()
    except:
        return "something went wrong while removing user"

    return "user removed successfully"

@app.put("/change_preferences")
def change_preferences():
    name = request.args.get("name")
    language = request.args.get("language")
    darkmode = request.args.get("darkmode")
    high_contrast = request.args.get("high_contrast")

    user_id = find_in_database("user", "name", name)
    if not user_id:
        return "invalid user"

    if not find_in_database("preferences", "user_id", user_id):
        try:
            cursor.execute("""
            INSERT INTO public.preferences(
            id, user_id, language, darkmode, high_contrast)
            VALUES (gen_random_uuid(), %s, %s, %s, %s);
            """, (user_id, 'ENG', True, False))
            connection.commit()
        except:
            return "something went wrong during setting up preferences"


    if language:
        set_in_database("preferences", "user_id", user_id, "language", language)

    if darkmode:
        set_in_database("preferences", "user_id", user_id, "darkmode", darkmode)

    if high_contrast:
        set_in_database("preferences", "user_id", user_id, "high_contrast", high_contrast)

    return "preferences changed successfully"

@app.post("/add_favourite")
def add_favourite():
    name = request.args.get("name")
    dish_name = request.args.get("dish_name")
 
    dish_id = find_in_database("dish", "title", dish_name)
 
    if not (dish_id):
        return "dish does not exist"
 
    if not find_in_database("user", "name", name):
        return "invalid user"

    user_id = find_in_database("user", "name", name)
 
    cursor.execute("""
    SELECT dish_id 
    FROM favourites
    WHERE user_id = %s and dish_id = %s; 
    """, (user_id, dish_id))
    check=cursor.fetchone()

    if check:
        return "dish is already favourite"
 
 
    fav_free = get_from_database("favourite_free", "user", "name", name)
    if fav_free == 0:
        return "no space left, sorry :c"
 
    try:
        cursor.execute("""
        INSERT INTO public.favourites(
        id, user_id, dish_id)
        VALUES (gen_random_uuid(), %s, %s);
        """, (user_id, dish_id))
        connection.commit()
    except:
        return "something went wrong during add favourite"
 
    set_in_database("user", "id", user_id, "favourite_free", fav_free-1)
 
    return "added favourite successfully"


@app.delete("/remove_favourite")
def remove_favourite():
    name = request.args.get("name")
    dish_name = request.args.get("dish_name")

    dish_id = find_in_database("dish", "title", dish_name)

    if not (dish_id):
        return "dish does not exist"

    if not find_in_database("user", "name", name):
        return "invalid user"

    user_id = find_in_database("user", "name", name)

    cursor.execute("""
        SELECT dish_id 
        FROM favourites
        WHERE user_id = %s and dish_id = %s; 
        """, (user_id, dish_id))
    check = cursor.fetchone()

    if not check:
        return "dish is not in favourites"

    try:
        cursor.execute("""
        DELETE FROM favourites
        WHERE user_id = %s and dish_id = %s; """,(user_id, dish_id))
        connection.commit()
    except:
        return "something went wrong during remove favourite"

    fav_free = get_from_database("favourite_free", "user", "name", name)
    set_in_database("user", "id", user_id, "favourite_free", fav_free+1)
    return "removed favourite successfully"


@app.delete("/cancel_reservation")
def cancel_reservation():
    name = request.args.get("name")

    user_id = find_in_database("user", "name", name)
    if not user_id:
        return "invalid user"

    #order_id = get_from_database("id", "order", "user", user_id)
    cursor.execute("""
        SELECT order_id
        FROM public."order" AS ord
        JOIN public.reservation AS res
        ON res.order_id = ord.id
        WHERE ord.user = %s;
        """,(user_id,))
    order_id=cursor.fetchone()
    print(user_id, ":", order_id)

    if not order_id:
        return "the order does not exist"

    try:
        cursor.execute("""
        DELETE FROM reservation
        WHERE order_id = %s; """, (order_id))
        connection.commit()
    except:
        return "something went wrong during reservation cancel"

    try:
        cursor.execute("""
        DELETE FROM public."order"
        WHERE id = %s; """, (order_id))
        connection.commit()
    except:
        return "reservation cancelled, but no order associated"

    return "reservation cancelled successfully"


def add_discount_option(effectivness, cost):
    try:
        cursor.execute("""
            INSERT INTO public.discounts(
            id, effectivness, cost)
            VALUES (gen_random_uuid(), %s, %s);
            """, (effectivness, cost))
        connection.commit()
    except:
        return False
    return True

def add_dish_to_menu(title, small,medium,large,unit,description,disc_base,pic):
    if(small==None):
        small=(None,None)
    if(medium==None):
        medium=(None,None)
    if(large==None):
        large=(None,None)
    try:
        cursor.execute("""
            INSERT INTO public.dish(
            id, title, 
            small_portion, medium_portion, large_portion, 
            small_price, medium_price, large_price, portion_unit, 
            description, discount_base, picture)
            VALUES (gen_random_uuid(), %s, 
            %s, %s, %s, 
            %s, %s, %s, %s,
            %s, %s, %s);
            """,(title,small[0],medium[0],large[0],
                 small[1],medium[1],large[1],unit,
                 description, disc_base, pic))
        connection.commit()
    except:
        return False
    return True

def set_today_special(dish_name):
    cursor.execute("""
        SELECT id 
        FROM public.dish
        WHERE title= %s ;
        """,(dish_name,))
    dish_id=cursor.fetchone()
    if(dish_id==None):
        return False
    dish_id=dish_id[0]

    if(True):
        cursor.execute("""
            INSERT INTO public.special(
            id,dish_id)
            VALUES (gen_random_uuid(), %s);
            """, (dish_id,))
        connection.commit()
    else:
        return False
    return True

def find_in_database(table, column, value):
    cursor.execute(f"""
        SELECT id 
        FROM public.{table}
        WHERE {column}= %s ;
        """,(value,))
    res_id=cursor.fetchone()
    if(res_id==None):
        return None
    return res_id[0]

def get_from_database(target, table, column, value):
    cursor.execute(f"""
        SELECT {target} 
        FROM public.{table}
        WHERE {column}= %s ;
        """,(value,))
    res_id=cursor.fetchone()
    if(res_id==None):
        return None
    return res_id[0]

def set_in_database(table, column, value, in_column, in_value):
    cursor.execute(f"""
        UPDATE public.{table} 
        SET {in_column}= %s
        WHERE {column}= %s
        RETURNING id;
        """,(in_value, value,))
    connection.commit()
    res_id=cursor.fetchone()
    if(res_id==None):
        return None
    return res_id[0]

def add_order(user_id, items, comment, discount):
    print(f"adding order by {user_id} with discount {discount}")
    print("items:",items)
    print("comment:",comment)
    ids=[]
    if(not items):
        return None

    #get discount effect
    try:
        disc_cost=get_from_database("cost", "discounts", "id",discount)
    except:
        connection.commit()
        return ("invalid discount format",)
    if(disc_cost != None):
        user_disc_points=get_from_database("discount_points", "user", "id",user_id)
        if(user_disc_points<disc_cost):
            return (f"not enough discount points {user_disc_points}<{disc_cost}",)
        disc_effect=get_from_database("effectivness", "discounts", "id",discount)
    elif(discount != None):
        return ("invalid discount",)
    else:
        disc_effect=0.0
        disc_cost=0

    #add order items
    try:
        for item in items:
            cursor.execute("""
                INSERT INTO public.order_item(
                id, portion, count, price, dish_id)
                VALUES (DEFAULT,%s,%s,0,%s)
                RETURNING id;
                """,(item[1],item[2],item[0],))
            ids.append(cursor.fetchone()[0])
    except:
        print("order item serial ID overflow")
        return None
    connection.commit()
    order_start=min(ids)
    order_end=max(ids)

    #calculate prices
    try:
        cursor.execute("""
            UPDATE public.order_item AS items
            SET price = (CASE
            WHEN portion=1 THEN dish.small_price
            WHEN portion=2 THEN dish.medium_price
            ELSE dish.large_price END)*count
            FROM public.dish AS dish WHERE dish.id=dish_id
            AND %s <= items.id and items.id <= %s;
            """,(order_start, order_end,))
    except:
        print("failed to calculate price of order items")
        return None
    connection.commit()

    #check for nonexistant portion size
    cursor.execute("""
        SELECT title, (CASE
        WHEN portion=1 THEN 'small'
        WHEN portion=2 THEN 'medium'
        ELSE 'large' END)
        FROM public.dish AS dish
        JOIN public.order_item AS items ON dish.id=dish_id
        WHERE %s <= items.id and items.id <= %s and items.price IS NULL;
        """, (order_start, order_end,))
    res=cursor.fetchall()
    if(res):
        return res

    #adjust prices for favourite foods
    cursor.execute("""
        UPDATE public.order_item AS items
        SET price = price * (1-discount_base)
        FROM public.favourites AS fav
        JOIN public.dish as dish
        ON fav.user_id=%s AND fav.dish_id=dish.id
        WHERE fav.dish_id=items.dish_id
        AND %s <= items.id and items.id <= %s;
        """, (user_id, order_start, order_end,))
    connection.commit()

    #calculate total price including discount
    cursor.execute("""
        SELECT SUM(price)*(1.0-%s)
        FROM public.order_item
        WHERE %s <= id and id <= %s;
        """, (disc_effect, order_start, order_end,))
    total_price=cursor.fetchone()[0]
    print(total_price)

    #add order
    order_id=None
    try:
        cursor.execute("""
            INSERT INTO public."order"(
            id, "user", "timestamp", comment,
            price, discount_used, items_start, items_end)
            VALUES (gen_random_uuid(), %s, NOW(), %s,
            %s, %s, %s, %s) RETURNING id;
            """,(user_id, comment,total_price,
            discount, order_start, order_end))
        order_id=cursor.fetchone()[0]
    except:
        connection.commit()
        return None

    #subtract discount points
    cursor.execute("""
        UPDATE public."user"
        SET discount_points = discount_points - %s
        WHERE id = %s;
        """,(disc_cost,user_id))
    connection.commit()
    print(ids)
    return order_id


#------------
init_DB()
clear_DB()

register_user("Peter", 123)
add_points_to(140, 75, "Peter")
register_user("Karol", "456")
print("trying logging in")
print(login("aa",56))
print(login("Peter",56))
print(login("Peter",123))
print("making discounts")
print(add_discount_option(0.10, 100))
print(add_discount_option(0.15, 140))
print(add_discount_option(0.20, 175))
print("adding dishes")
print(add_dish_to_menu("vodka",(300,2.65),(540,3.79),None,
                       "ml","velmi dobra",0.2,None))
print(add_dish_to_menu("zemiaky",(140,1.05),(240,1.79),(360,2.50),
                       "g","chutne",0.1,None))
set_today_special("vodka")



#----------
@app.get("/login")
def try_to_login():
    name = request.args.get('name')
    password = request.args.get('password')
    if(login(name,password)):
        return "correct password",200
    else:
        return "wrong password or username",401

@app.get("/register")
def try_to_register():
    name = request.args.get('name')
    password = request.args.get('password')
    res = register_user(name,password)
    if(res==None):
        res = register_user(name,password)
    if(res == True):
        return "registration successful", 201
    elif(res==None):
        return "something went wrong, try again",500
    else:
        return "username already taken",409

@app.post("/delivery")
def delivery():
    
    name = request.args.get('name')
    user_id=find_in_database("user","name",name)
    if(user_id == None):
        return "invalid user", 401

    try:
        data=json.loads(request.data)
    except:
        return "wrong format", 400

    try:
        address=[0,0,0]
        json_address=data["address"]
        address[0]=str(json_address["postal code"])
        address[1]=str(json_address["street"])
        address[2]=int(json_address["number"])
    except:
        return "wrong address fromat", 400

    try:
        discount=data["discount used"]
    except:
        discount=None

    try:
        comment=data["comment"]
    except:
        comment=""
    
    try:
        json_items=data["items"]
    except:
        return "no items", 400

    #get order items
    try:
        items=[0]*len(json_items)
        for i in range(len(json_items)):
            items[i]=[0,0,0]
            
            items[i][0]=find_in_database("dish","title",json_items[i]["name"])
            if(items[i][0]==None):
                return f'nonexistant food: {json_items[i]["name"]}', 404

            items[i][1]=json_items[i]["size"]
            if(items[i][1]=="small"):
                items[i][1]=1
            elif(items[i][1]=="medium"):
                items[i][1]=2
            elif(items[i][1]=="large"):
                items[i][1]=3
            else:
                return f"invalid portion size: {items[i][1]}", 400

            
            items[i][2]=int(json_items[i]["count"])
            if(items[i][2]<1):
                return f"""wrong food count {json_items[i]["name"]}:
                    {json_items[i]["count"]}""", 400
    except:
        return "invalid food item format", 400

    order_id=add_order(user_id, items, comment, discount)
    if(order_id==None):
        return "order failed", 500

    if(order_id.__class__ == list):
        return f"nonexistant food portion size {order_id}",404

    if(order_id.__class__ == tuple):
        return order_id[0],400

    #add delivery
    cursor.execute("""
        INSERT INTO public.delivery(
        id, order_id, postal_code,
        street, house_number, delivered)
        VALUES (gen_random_uuid(), %s, %s,
        %s, %s, false);
        """, (order_id, address[0],address[1],address[2]))
    connection.commit()
    return "delivery order successful",200

from datetime import datetime, timedelta
@app.post("/reservation")
def make_reservation():
    
    name = request.args.get('name')
    user_id=find_in_database("user","name",name)
    if(user_id == None):
        return "invalid user", 401

    try:
        data=json.loads(request.data)
    except:
        return "wrong format"

    if(True):
        dtime=[0,0,0]
        people=int(data["people"])
        json_dtime=data["datetime"]
        dtime[0]=datetime.strptime(str(json_dtime["date"]),"%d.%m.%Y")
        dtime[1]=datetime.strptime(str(json_dtime["from"]),"%H:%M").time()
        dtime[2]=datetime.strptime(str(json_dtime["until"]),"%H:%M").time()
        timestring=str(dtime[0].date())+' '+str(dtime[1])
        from_dtime=datetime.strptime(timestring,"%Y-%m-%d %H:%M:%S")
    else:
        return "wrong time fromat"

    if(dtime[1]>dtime[2]):
        return "departure needs to happen after arrival"
    valid_frod_dtime=datetime.now() + timedelta(hours=1)
    if(from_dtime<valid_frod_dtime):
        return f"""reservation can be at earliest
    {valid_frod_dtime.replace(second=0, microsecond=0)}"""
        

    try:
        discount=data["discount used"]
    except:
        discount=None

    try:
        comment=data["comment"]
    except:
        comment=""

    food_ordered = True
    try:
        json_items=data["items"]
    except:
        food_ordered = False

    #get order items
    order_id=None
    if(food_ordered):
        try:
            items=[0]*len(json_items)
            for i in range(len(json_items)):
                items[i]=[0,0,0]
                
                items[i][0]=find_in_database("dish","title",json_items[i]["name"])
                if(items[i][0]==None):
                    return f'nonexistant food: {json_items[i]["name"]}'

                items[i][1]=json_items[i]["size"]
                if(items[i][1]=="small"):
                    items[i][1]=1
                elif(items[i][1]=="medium"):
                    items[i][1]=2
                elif(items[i][1]=="large"):
                    items[i][1]=3
                else:
                    return f"invalid portion size: {items[i][1]}"

                
                items[i][2]=int(json_items[i]["count"])
                if(items[i][2]<1):
                    return f'wrong food count {json_items[i]["name"]}:{json_items[i]["count"]}'
        except:
            return "invalid food item format"

        order_id=add_order(user_id, items, comment, discount)
        if(order_id==None):
            return "order failed"

        if(order_id.__class__ == list):
            return f"nonexistant food portion size {order_id}"

        if(order_id.__class__ == tuple):
            return order_id[0]
    else:
        cursor.execute("""
            INSERT INTO public."order"(
            id, "user", "timestamp", comment,
            price, discount_used, items_start, items_end)
            VALUES (gen_random_uuid(), %s, NOW(), %s,
            0.00, NULL, NULL, NULL) RETURNING id;
            """, (user_id, comment),)
        order_id=cursor.fetchone()[0]
        connection.commit()

    cursor.execute("""
        UPDATE public."order"
        SET price = price + '$1.50'
        WHERE id = %s;
        """, (order_id,))
    connection.commit()
        

    #add reservation
    cursor.execute("""
        INSERT INTO public.reservation(
        id, order_id, date, "from",
        until, people, "table", "QR code")
        VALUES (gen_random_uuid(), %s, %s, %s,
        %s, %s, NULL, NULL);
        """, (order_id, dtime[0], dtime[1], dtime[2], people))
    connection.commit()
    return "reservation order successful"

@app.get("/discounts")
def available_discounts():
     cursor.execute("""
          SELECT * FROM discounts;
          """)
     return cursor.fetchall()

#---------
order1={
    "items": [
        {"name": "vodka", "size": "small", "count": 2},
        {"name": "zemiaky", "size": "medium", "count": 3}
    ]
}
print(find_in_database("dish","title","vodka"))
print(json.dumps(order1))

app.run()
