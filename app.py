from flask import Flask, request
import psycopg2
import random
import hashlib

app = Flask(__name__)

connection=psycopg2.connect(
    host="localhost",
    database="test1",
    user="postgres",
    password="AkoBkoDko1666"
    )
cursor = connection.cursor()

def find_in_database(table, column, value):
    cursor.execute(f"""
        SELECT id 
        FROM public.{table}
        WHERE {column}= %s ;
        """,(value,))
    res_id=cursor.fetchone()
    if(res_id==None):
        return None
    return res_id[0]

def get_from_database(target, table, column, value):
    cursor.execute(f"""
        SELECT {target} 
        FROM public.{table}
        WHERE {column}= %s ;
        """,(value,))
    res_id=cursor.fetchone()
    if(res_id==None):
        return None
    return res_id[0]

def set_in_database(table, column, value, in_column, in_value):
    cursor.execute(f"""
        UPDATE public.{table} 
        SET {in_column}= %s
        WHERE {column}= %s ;
        """,(in_value, value,))
    res_id=cursor.fetchone()
    if(res_id==None):
        return None
    return res_id[0]


@app.get("/store")
def get_stores():
    cursor.execute("""
        SELECT table_name 
        FROM information_schema.tables
        WHERE table_schema = 'public'  -- Change if you're using a different schema
        ORDER BY table_name;
    """)
    tables=cursor.fetchall()
    return {"stores": tables}


@app.put("/preferences")
def change_settings():
    setting = request.args.get('setting')
    val = request.args.get('val')
    cursor.execute("""
        SELECT table_name 
        FROM information_schema.tables
        WHERE table_schema = 'public'  -- Change if you're using a different schema
        ORDER BY table_name;
    """)
    tables=cursor.fetchall()
    print(f"changed {setting} to {val}")
    return {"stores": tables}

#---------------
def init_DB():
    cursor.execute("""
        -- This script was generated by the ERD tool in pgAdmin 4.
        -- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
        BEGIN;


        CREATE TABLE IF NOT EXISTS public.dish
        (
            id uuid,
            title text,
            small_portion integer,
            medium_portion integer,
            large_portion integer,
            small_price money,
            medium_price money,
            large_price money,
            portion_unit text,
            description text,
            discount_base real,
            picture bytea,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.special
        (
            id uuid,
            dish_id uuid,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.order_item
        (
            id uuid,
            portion integer,
            count integer,
            price money,
            dish_id uuid,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public."order"
        (
            id uuid,
            "user" uuid,
            "timestamp" timestamp with time zone,
            comment text,
            price money,
            discount_used uuid,
            items_id uuid[],
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.discounts
        (
            id uuid,
            effectivness real,
            cost integer,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public."user"
        (
            id uuid,
            name text,
            password bytea,
            salt bytea,
            discount_points integer,
            loyalty_points integer,
            level integer,
            favourite_capacity integer,
            favourite_free integer,
            pref_id uuid,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.favourites
        (
            id uuid,
            user_id uuid,
            dish_id uuid,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.delivery
        (
            id uuid,
            order_id uuid,
            card_used boolean,
            postal_code text,
            street text,
            house_number integer,
            delivered boolean,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.reservation
        (
            id uuid,
            order_id uuid,
            date date,
            "from" time with time zone,
            until time with time zone,
            people integer,
            "table" integer,
            "QR code" bytea,
            PRIMARY KEY (id)
        );

        CREATE TABLE IF NOT EXISTS public.preferences
        (
            id uuid,
            user_id uuid,
            language text,
            darkmode boolean,
            high_contrast boolean,
            PRIMARY KEY (id)
        );
        END;
        """)
    connection.commit()
    print("initiazed DB")
    return

def clear_DB():
    cursor.execute("""
        DELETE FROM public.dish
                WHERE true;
        DELETE FROM public.special
                WHERE true;
        DELETE FROM public.order_item
                WHERE true;
        DELETE FROM public."order"
                WHERE true;
        DELETE FROM public.discounts
                WHERE true;
        DELETE FROM public."user"
                WHERE true;
        DELETE FROM public.favourites
                WHERE true;
        DELETE FROM public.delivery
                WHERE true;
        DELETE FROM public.reservation
                WHERE true;
        DELETE FROM public.preferences
                WHERE true;
	""")
    connection.commit()
    print("cleared DB")
    return

def register_user(name, password):
    name=str(name)
    password=str(password)
    
    salt=random.randbytes(8)
    sha256=hashlib.sha256()
    sha256.update(password.encode())
    sha256.update(salt)
    pass_hash=sha256.hexdigest().encode()
    print("adding: ",name)
    print(salt)
    print(pass_hash)
    print("------")

    cursor.execute("""
        SELECT password, salt 
        FROM public."user"
        WHERE name= %s ;
        """,(name,))
    res=cursor.fetchone()
    if(res!=None):
        return False
    
    try:
        cursor.execute("""
        INSERT INTO public."user"(
            id, name, password, salt, 
            discount_points, loyalty_points, level, 
            favourite_capacity, favourite_free, pref_id)
            VALUES (
            gen_random_uuid(), %s, %s, %s, 
            0, 0, 0, 
            0, 1, null);
            """, (name, pass_hash, salt))
        connection.commit()
    except:
        return None
    return True

def login(name, password):
    name=str(name)
    password=str(password)
    
    cursor.execute("""
        SELECT password, salt 
        FROM public."user"
        WHERE name= %s ;
        """,(name,))
    password_salt=cursor.fetchone()
    if(password_salt == None):
        return False

    user_salt=password_salt[1].tobytes()
    sha256=hashlib.sha256()
    sha256.update(password.encode())
    sha256.update(user_salt)
    pass_hash=sha256.hexdigest().encode()
    
    return password_salt[0].tobytes() == pass_hash

@app.put("/change_password")
def change_password():
    name = request.args.get("name")
    old_password = request.args.get("old_password")
    new_password = request.args.get("new_password")

    if not find_in_database("user", "name", name):
        return "incorrect user name"

    # print(name, old_password, new_password)
    if login(name, old_password):
        user_salt = random.randbytes(8)
        sha256 = hashlib.sha256()
        sha256.update(new_password.encode())
        sha256.update(user_salt)
        pass_hash = sha256.hexdigest().encode()


        try:
            cursor.execute("""
            UPDATE "user" 
            SET password = %s, salt = %s
            WHERE name = %s ;
            """,(pass_hash, user_salt, name))
        except:
            return "something went wrong during password update"
        return "password changed successfully"
    else:
        return "incorrect old password"

@app.post("/add_favourite")
def add_favourite():
    name = request.args.get("name")
    dish_name = request.args.get("dish_name")

    dish_id = find_in_database("dish", "title", dish_name)

    if not (dish_id):
        return "dish does not exist"

    if not find_in_database("user", "name", name):
        return "invalid user"

    user_id = find_in_database("user", "name", name)

    cursor.execute("""
    SELECT dish_id 
    FROM public."favourites"
    WHERE user_id = %s and dish_id = %s; 
    """, (user_id, dish_id))
    check=cursor.fetchone()

    if check:
        return "dish is already favourite"


    fav_free = get_from_database("favourite_free", "user", "name", name)
    if fav_free == 0:
        return "no space left, sorry :c"

    try:
        cursor.execute("""
        INSERT INTO "favourites"(
        id, user_id, dish_id)
        VALUES (gen_random_uuid(), %s, %s)
        """, (user_id, dish_id))
    except:
        return "something went wrong during add favourite"

    set_in_database("user", "id", user_id, "favourite_free", fav_free-1)

    return "added favourite successfully"

def add_discount_option(effectivness, cost):
    try:
        cursor.execute("""
            INSERT INTO public.discounts(
            id, effectivness, cost)
            VALUES (gen_random_uuid(), %s, %s);
            """, (effectivness, cost))
        connection.commit()
    except:
        return False
    return True

def add_dish_to_menu(title, small,medium,large,unit,description,disc_base,pic):
    if(small==None):
        small=(None,None)
    if(medium==None):
        medium=(None,None)
    if(large==None):
        large=(None,None)
    try:
        cursor.execute("""
            INSERT INTO public.dish(
            id, title, 
            small_portion, medium_portion, large_portion, 
            small_price, medium_price, large_price, portion_unit, 
            description, discount_base, picture)
            VALUES (gen_random_uuid(), %s, 
            %s, %s, %s, 
            %s, %s, %s, %s,
            %s, %s, %s);
            """,(title,small[0],medium[0],large[0],
                 small[1],medium[1],large[1],unit,
                 description, disc_base, pic))
        connection.commit()
    except:
        return False
    return True

def set_today_special(dish_name):
    cursor.execute("""
        SELECT id 
        FROM public.dish
        WHERE title= %s ;
        """,(dish_name,))
    dish_id=cursor.fetchone()
    if(dish_id==None):
        return False
    dish_id=dish_id[0]

    if(True):
        cursor.execute("""
            INSERT INTO public.special(
            id,dish_id)
            VALUES (gen_random_uuid(), %s);
            """, (dish_id,))
        connection.commit()
    else:
        return False
    return True
    
#------------
init_DB()
clear_DB()

register_user("Peter", 123)
register_user("Karol", "456")
print("trying logging in")
print(login("aa",56))
print(login("Peter",56))
print(login("Peter",123))
print("making discounts")
print(add_discount_option(0.10, 100))
print(add_discount_option(0.15, 140))
print(add_discount_option(0.20, 175))
print("adding dishes")
print(add_dish_to_menu("vodka",(300,2.65),(540,3.79),None,
                       "ml","velmi dobra",0.2,None))
print(add_dish_to_menu("zemiaky",(140,1.05),(240,1.79),(360,2.50),
                       "g","chutne",0.1,None))
set_today_special("vodka")



#----------
@app.get("/login")
def try_to_login():
    name = request.args.get('name')
    password = request.args.get('password')
    if(login(name,password)):
        return "correct password",200
    else:
        return "wrong password",401

@app.get("/register")
def try_to_register():
    name = request.args.get('name')
    password = request.args.get('password')
    res = register_user(name,password)
    if(res==None):
        res = register_user(name,password)
    if(res == True):
        return "registration successful", 201
    elif(res==None):
        return "something went wrong, try again",500
    else:
        return "username already taken",409


#---------
app.run()
